#member-profile.bg-gray-05
  .max-width-3.mx-auto.p2
    .flex.items-center
      .fill-black
        = embedded_svg 'i-user.svg'
      %h1.ml2 Profile

    .clearfix.bg-white.px3.py2.rounded.mb2
      .col.col-12
        %h2.my0 Login
        %h6.mb0.gray-60 Email address
        %h3= @profile.email
        = form_tag "#", method: 'post', class: 'edit_password', style: 'display:none;' do
          / Inline styles used below for jQuery show and hide animations to work
          .col.col-12
            %h6.inline.mb0.gray-60 Current password
            #curr-password-error.inline
            = password_field_tag :current_password, nil, data: {"parsley-required": "true", "parsley-excluded": "true", "parsley-errors-container":"#curr-password-error"} 
            %h6.inline.mb0.gray-60 New password
            #new-password-error.inline
            = password_field_tag :new_password, nil, data: { "parsley-required": "true", "parsley-errors-container":"#new-password-error"  }
            %h6.inline.mb0.gray-60 Confirm new password
            #confirm-new-password-error.inline
            = password_field_tag :new_password_confirmation, nil, data: { "parsley-equalto": "#new_password", "parsley-required": "true", "parsley-group": "change-password", "parsley-equalto-message": 'Password confirmation does not match new password', "parsley-errors-container":"#confirm-new-password-error" }

        #btn-change-password.btn.btn-sm.btn-primary.btn-primary--hover.mt2
          Change password
        #btn-cancel-change-password.btn.btn-sm.btn-secondary.btn-secondary--hover.mt2{style: 'display: none'}
          Cancel


    .clearfix
      = simple_form_for @profile, url: profile_path(@profile) do |f|
        .clearfix.bg-white.rounded.px3.py2.mb2
          %h2.my0 Personal
          .col.col-12.sm-col.sm-col-6.px2.sm-pl0.sm-pr2
            %h6.mb0.gray-60 First name
            = f.input_field :first_name, data: {"parsley-required": "true"}
            
          .col.col-12.sm-col.sm-col-6.px2.sm-pl0.sm-pr2
            %h6.mb0.gray-60 Last name
            = f.input_field :last_name, data: {"parsley-required": "true"}

          .col.col-12.px2.sm-pl0.sm-pr2
            %h6.mb0.gray-60 Phone
            = f.input_field :phone, data: {"parsley-pattern": "^((\\(\\d{3}\\) ?)|(\\d{3}-))?\\d{3}-\\d{4}$"}

        .clearfix.bg-white.rounded.py2.px3
          %h2.my0 Home
          .col.col-12.px2.sm-pl0.sm-pr2
            %h6.mb0.gray-60 Home address
            =f.input_field :address_line_1
          
          .col.col-12.sm-col.sm-col-4.px2.sm-pl0.sm-pr2
            %h6.mb0.gray-60 City
            =f.input_field :city, data: {"parsley-required": "true"}
          
          .col.col-12.sm-col.sm-col-4.px2.sm-pl0.sm-pr2
            %h6.mb0.gray-60 State
            =f.input_field :state, collection: us_states, include_blank: "Select state...", data: {"parsley-required": "true"}

          .col.col-12.sm-col.sm-col-4.px2.sm-pl0.sm-pr2
            %h6.mb0.gray-60 Zip Code
            =f.input_field :zip_code, data: {"parsley-required": "true"}
          
          .clearfix
            .col.col-12.sm-col.sm-col-4.px2.sm-pl0.sm-pr2
              %h6.mb0.gray-60 Housing
              #housing-radio-buttons.relative
                = radio_button_tag('profile[housing]', "own", (@profile.housing == 'own'))
                = label_tag('profile[housing]', "Own")
                &nbsp;
                = radio_button_tag('profile[housing]', "rent", (@profile.housing == 'rent'))
                = label_tag('profile[housing]', "Rent")
              
            .col.col-12.sm-col.sm-col-8.px2.sm-pl0.sm-pr2
              %h6.mb0.gray-60 Average electric bill
              .clearfix.pl1
                .col.col-8.mt1
                  #slider{target: '#profile_avg_electrical_bill'}
                .col.col-4.pl1
                  .inline-block.center
                    %h2.m0
                      &nbsp;$
                      %span#slider_val= @profile.avg_electrical_bill
              =f.input :avg_electrical_bill, as: :hidden, input_html: { value: @profile.avg_electrical_bill || "0" }

          .col.col-12.p2.sm-px0.sm-py2
            =f.submit class: 'btn btn-sm btn-primary', disabled: true

:javascript

  (function(){
    /*------------- BEGIN Module variable declarations and initializations-----------*/
    var 
        currentPasswordValid,
        updatedFields,
        showPasswordForm,
        hidePasswordForm,
        submitChangedPassword,
        $pwForm,
        $profileForm,
        $currPw,
        $pCurrPw,
        $pPwForm,
        $pProfileForm,
        $pwSubmit,
        $btnProfileSubmit,
        $btnChangePw,
        $btnCancelChangePw;

    // Variable initializations
    currentPasswordValid = false;
    updatedFields = {}; // Payload with updated info to send to server
    
    
    // jQuerified elements
    $pwForm = $('.edit_password');
    $currPw = $('#current_password');
    $btnChangePw = $('#btn-change-password');
    $btnCancelChangePw = $('#btn-cancel-change-password');

    $profileForm = $('.edit_profile');
    $btnProfileSubmit = $profileForm.find('input[type=submit]');

    // Parsleyfied current password field
    $pCurrPw = $('#current_password').parsley();

    // Parsleyfied forms
    var $pPwForm = $('.edit_password').parsley({
                        errorClass: "error",
                        errorsWrapper: '<div class="invalid-message inline right"></div>',
                        errorTemplate: '<span></span>',
                        successClass: null
                    });

    var $pProfileForm = $('.edit_profile').parsley({
                            errorClass: "error",
                            errorsWrapper: '<div class="invalid-message inline right"></div>',
                            errorTemplate: '<span></span>',
                            successClass: null
                        });

    /*------------- END Module variable declarations and definitions-----------*/
    
    /*------------- BEGIN Module configurations--------------------------------*/

    /*------------- BEGIN UI configurations -----------------------------------*/
    // Mask phone and zip code input
    $('#profile_zip_code').mask('00000');
    $('#profile_phone').mask('(000) 000-0000');

    // jQuery UI Slider for average electrical bill
    $( "#slider" ).slider({
      range: "min",
      animate: "fast",
      max: 250,
      value: #{@profile.avg_electrical_bill},
      create: function( event, ui ) {
        $('#slider > span').css({cursor: 'pointer', outline: '0'});
      },
      slide: function( event, ui ) {
        $('#slider_val').html(ui.value);
        $('#profile_avg_electrical_bill').val(ui.value);
        setUpdatedField($($(event.target).attr('target')));
        enableSubmit();
      }
    });
    /*------------- END UI configurations -----------------------------------*/

    /*------------- BEGIN Profile form configurations -----------------------------------*/
    // Fields to bind input change handler
    var profileFields = {
      first_name: $('#profile_first_name'),
      last_name: $('#profile_last_name'),
      phone: $('#profile_phone'),
      address: $('#profile_address_line_1'),
      city: $('#profile_city'),
      state: $('#profile_state'),
      zip_code: $('#profile_zip_code')
    };

    // Bind input event handler to profile fields
    for (key_name in profileFields){
      profileFields[key_name].on('input', function(event){
        setUpdatedField($(this));
        enableSubmit();
      });
    }

    // Event handler for housing radio buttons
    $('input[type=radio]').change(function() {
      setUpdatedField($(this));
      enableSubmit();
    });

    // /enableSubmit/ enable submission of profile info if a field is changed
    var enableSubmit = function(){
      $btnProfileSubmit.prop("disabled", false);
    }

    // /setUpdatedField/ On a profile field change, update updatedFields
    var setUpdatedField = function($field){
      field_name = $field.attr('name');
      field_value = $field.val();
      updatedFields[field_name] = field_value;
    }

    // Validate profile info fields on submit
    $btnProfileSubmit.on('click', function(event){
      event.preventDefault();
      $pProfileForm.validate();
    });

    // On profile form success, send updatedFields payload to server
    $pProfileForm.on('form:success', function(){
      $.ajax({
        type: "POST",
        url: $profileForm.attr('action'),
        data: { _method:'PATCH',  updatedFields},
        dataType: 'json',
        success: function(msg) {
          $pProfileForm.reset();
          $btnProfileSubmit.attr('disabled', true);
        }
      });
    }); 
    /*------------- END Profile form configurations -----------------------------------*/

    /*------------- BEGIN Password form configurations -----------------------------------*/
    // /showPasswordForm/ animate revealing of the password form elements
    showPasswordForm = function(){
      $pwForm.show('slow', function(){
        $btnChangePw.bind('click', submitChangedPassword);
      });
      $btnCancelChangePw.show('slow');
      $btnChangePw.html('Save changes').unbind('click');
    };


    // /hidePasswordForm/ animate hiding of the password form elements and reset form elements
    hidePasswordForm = function(){
      $pwForm.hide('slow', function(){
        // clear password input fields on cancel
        $pwForm.find('input[type=password]').val("");

        // Reset parsley styles
        $pPwForm.reset();
        $pCurrPw.reset();
      });
      $btnCancelChangePw.hide('slow');
      $btnChangePw
        .html('Change password')
        .unbind('click', submitChangedPassword)
        .bind('click', showPasswordForm);
    }

    submitChangedPassword = function(){
      $pPwForm.validate();
      
      $.ajax({
        url: "profile/verify-current-password",
        data: {'current_password': $('#current_password').val()},
        dataType: 'json',
        async: false,
        type: 'GET',
        success: function(data){
          response = true;
          currentPasswordValid = true;
          $pCurrPw.removeError('current_password_error', {updateClass: true});
          if($pPwForm.isValid()){
            var updated_password = $('#new_password_confirmation').val();
            $.ajax({
              type: "POST",
              url: '/profile/update-password',
              data: { _method:'PATCH',  updated_password},
              dataType: 'json',
              success: function(data, status, jqxhr) {
                hidePasswordForm();
              }
            });
          };
        },
        error: function(data){
          currentPasswordValid = false;
          if(!$currPw.hasClass('parsley-error')){
            $pCurrPw.addError('current_password_error', {message: 'Current password is incorrect.' , assert: false, updateClass: true});
          }
        }
      });
    };

    // Change password event handling
    $btnChangePw.on('click', showPasswordForm);
    $btnCancelChangePw.on('click', hidePasswordForm);
    /*------------- END Password form configurations -----------------------------------*/
    /*------------- END Module configurations-------------------------------------------*/
  }());
