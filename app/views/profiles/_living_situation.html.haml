:css
  .btn-secondary--invalid {
    border-color: red;
    color: red;
  }

.spacer{style: 'height: 100px;' }       
-if flash[:notice]
  =render 'profiles/flash_notice'
#living-situation.mt1
  .max-width-6.mx-auto
    .clearfix.mb2
      .col.col-12.center
        .max-width-3.mx-auto.h2.line-height-2
          Tell us about your home
    .clearfix.mx-auto.pt2
      =simple_form_for @profile, remote: true do |form|
        .sm-col.sm-col-12.md-col-6.pr2.md-pr4.pl2.pt1
          %label.h4
            Phone
          %i.fa.fa-question-circle-o.pointer
          %br
          =form.input_field :phone, class: "h3 bg-transparent rounded required-field", placeholder: "", data: {reg: '\\(\\d{3}\\)\\s\\d{3}\\-\\d{4}', target: '#phone-error-msg'}
          #phone-error-msg.red.display-none
            Phone number is required. 
            %span#why-phone.gray-80.pointer
              Why?

          %p#phone-input-hint.mt0.display-none.gray-80
            Your number makes it quicker for our concierge team to start helping you.
          .mt0.md-mt2.pt1
            %label.h4 Average Electric Bill (Optional)
            .clearfix.pl1
              .col.col-8.mt1
                #slider
              .col.col-4.pl1
                .inline-block.center
                  %h2.m0
                    &nbsp;$
                    %span#slider_val 0
              =form.input :avg_electrical_bill, as: :hidden, input_html: { value: @profile.avg_electrical_bill || "0" }
        .sm-col.sm-col-12.md-col-6.pl2.sm-pl-0.pr2
          .clearfix.details
            .pt1
              %label.h4 Street address (Optional)
              %br
              =form.input_field :address_line_1, class: "geocode h3 bg-transparent rounded", placeholder: ""
              %span#span-street_number.display-none{data: {geo: 'street_number'}}
              %span#span-route.display-none{data: {geo: 'route'}}
            
            #city-state-zip.col.col-5.pt1{data: {target: '#city-error-msg'}}
              %label.h4 City
              %br
              =form.input_field :city, class: "geocode h3 bg-transparent rounded required-field", placeholder: "",  data: {reg: '\\w', 'msg-group': '#city-state-zip', label: 'City'}
              %span#span-city.display-none{data: {geo: 'locality'}}
            .col.col-3.pt1
              .pl1
                %label.h4 State
                %br
                =form.input_field :state, collection: us_states, class: "h3 bg-transparent rounded required-field", data: {reg: '^\\w{2}', 'msg-group': '#city-state-zip', label: 'State'}
                %span#span-state.display-none{data: {geo: 'administrative_area_level_1_short'}}
            .col.col-4.pt1
              .pl1
                %label.h4 Zip
                %br
                =form.input_field :zip_code, type: "tel", onkeypress: 'return event.charCode >= 48 && event.charCode <= 57', class: "geocode h3 bg-transparent rounded required-field", maxlength: "5", placeholder: "", data: {reg: '^\\d{5}', 'msg-group': '#city-state-zip', label: 'Zip'}
                %span#span-zipcode.display-none{data: {geo: 'postal_code'}}
            #city-error-msg.red.display-none
            .col.col-12.pt1
              %label.h4 Housing
              %br
              .btn-group
                %button.btn.btn-sm.btn-secondary{class: "#{'btn-secondary--active' if @profile.housing == 'rent'}", type: "button", data: {value: "rent"}} Rent
                %button.btn.btn-sm.btn-secondary{class: "#{'btn-secondary--active' if @profile.housing == 'own'}", type: "button", data: {value: "own"}} Own
              =form.input :housing, :as => :hidden, input_html: { data: {reg: '(own|rent)', target: '#housing-error-msg', 'error-target': '.btn-group > .btn-secondary'}, value: @profile.housing, class: 'required-field'}
            #housing-error-msg.red.display-none
              Housing type is required.
        .clearfix
          .col.col-12
            .px2.mt4.relative{style: 'height:168px;'}
              =render :partial => "profiles/onboard_submit_btns", :locals=>{:form=>form}

:javascript
  $( document ).ready( function() {
    $(".geocode").geocomplete({ details: ".details", detailsAttribute: "data-geo" });

    $('.geocode').bind("geocode:result", function(e, r) {
      $('#profile_state').val($('#span-state').html());
      $('#profile_city').val($('#span-city').html());
      $('#profile_zip_code').val($('#span-zipcode').html());
      $('#profile_address_line_1').val($('#span-street_number').html() + " " + $('#span-route').html());
      $requiredFields.change();
    });

    $("#profile_phone").mask("(999) 999-9999");

    //toggle phone input hint
    $('.fa-question-circle-o').on('click', function(){
      $(this).toggleClass('blue');
      $('#phone-input-hint').toggleClass('display-none');
    });

    $('#why-phone').on('click', function(){
      if($('.fa-question-circle-o').hasClass('blue')){
        $('.fa-question-circle-o').toggleClass('blue');
      }else{
        $('.fa-question-circle-o').addClass('blue');
      }
      $('#phone-input-hint').toggleClass('display-none');
    });

    $( "#slider" ).slider({
      range: "min",
      animate: "fast",
      max: 250,
      value: #{@profile.avg_electrical_bill},
      create: function( event, ui ) {
        $('#slider_val').html(#{@profile.avg_electrical_bill});
        $('#slider > span').css({cursor: 'pointer', outline: '0'});
      },
      slide: function( event, ui ) {
        $('#slider_val').html(ui.value);
        $('#profile_avg_electrical_bill').val(ui.value);
      }
    });

    //housing toggle button
    $('.btn-group .btn').on('click', function(){
      $('.btn-group .btn').not(this).removeClass('btn-secondary--active');
      $(this).toggleClass('btn-secondary--active');
      if( $('.btn-secondary--active').size() > 0 ){
        var val = $(this).data("value");
        $('#profile_housing').val(val).trigger('change');
      }else{
        $('#profile_housing').val("").trigger('change');
      }
    });

    var $requiredFields = $('.required-field');
    var invalidFields = [];

    $('input[value="Next"]').on('click', function(e){
      e.preventDefault();
      if (validateRequiredFields($requiredFields)){ 
        $("form").submit();
      }
    });

    function formatErrorMsg($group) {
      console.log(invalidFields);
      switch (invalidFields.length) {
              case 1:
                str = invalidFields[0] + ' is required.';
                break;
              case 2:
                str = invalidFields[0] + ' and ' + invalidFields[1] + ' are required.';
                break;
              case 3:
                str = invalidFields[0] + ', ' + invalidFields[1] + ', & ' + invalidFields[2] + ' are required.';
                break;
            }
            $($group.data('target')).html(str);
            $($group.data('target')).removeClass('display-none');
    }

    //requiredFieldsComplete = false;
    var validateRequiredFields = function($fields){
      invalidFields = [];
      $.each($fields,function(index, value){
        patt = new RegExp($(value).data('reg'));
        if(patt.test($(value).val()) == false  ){
          $(value).addClass('invalid-field');

          if($(value).data('error-target')){
            var target = $(value).data('error-target');
            $(target).addClass('btn-secondary--invalid');
          }

          if($(value).data('msg-group')){
            var $group = $($(value).data('msg-group'));
            invalidFields.push($(value).data('label'));
            formatErrorMsg($group);
            
          } else {
            $($(value).data('target')).removeClass('display-none');
          }
        }
      });
      return $('.invalid-field').length == 0 ? true : false;
    };

    //state machine
    $requiredFields.bind('input change propertychange', function(){
      patt = new RegExp($(this).data('reg'));
      console.log(patt);
      if(patt.test($(this).val()) == true ){
        $(this).removeClass('invalid-field');
        if ($(this).attr('id')=='profile_phone' && $('.fa-question-circle-o').hasClass('blue')){
          $('.fa-question-circle-o').trigger('click');
        }
        if ($(this).data('msg-group')){
          var $group = $($(this).data('msg-group'));
          var msgGroup = $(this).data('msg-group');
          var target = $(msgGroup).data('target');

          var label = $(this).data('label');
          var validIndex = invalidFields.indexOf(label);
          if(validIndex != -1){
            invalidFields.splice(validIndex, 1);
            formatErrorMsg($group);
          }

          var $msgGroup = $('*[data-msg-group="' + msgGroup + '"]');
          var numFields = $msgGroup.length;
          var numValidFields = 0;

          $.each($msgGroup,function(index, value){
            patt = new RegExp($(value).data('reg'));
            if(patt.test($(value).val()) == false){
              return false;
            } else {
              numValidFields += 1;
            }
          });
          if(numValidFields == numFields){
            $(target).addClass('display-none');
          }
        } else {
          if($(this).data('error-target')){
            var target = $(this).data('error-target');
            $(target).removeClass('btn-secondary--invalid');
          }
          $($(this).data('target')).addClass('display-none');
        }
      }
    });

    //submit buttons may not be pushed multiple times
    $("form").submit(function(e) {
      $(this).submit(function() {
        return false;
      });
      return true;
    });
     //mobile
    $(window).scrollTop(0)
  });
