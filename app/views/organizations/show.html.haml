-content_for :meta do
  %meta{name: "turbolinks-cache-control", content:"no-cache"}

-content_for :body_class do
  bg-gray-05

/%p#notice= notice

#member-profile.bg-gray-05
  .max-width-4.mx-auto.p2
    .flex.items-center
      .fill-black
        = inline_svg "icons/i-admin.svg", class:"icon-l"
      %h1.ml2 Admin

    .clearfix
      .max-width-1.bg-white.rounded.mb3.flex.content-center
        / HACK: Need to company logo dynamically
        =image_tag "partner_logos/mydomino_logo_400x400.png", size: "64x64", class: "m2"
        %div.my2
          %h2.m0= @organization.name
          %h4.m0.gray-60 
            Employees enrolled: 
            %span#member-count= @organization.users.size


    .clearfix
      .col.col-12.sm-col.sm-col-6.sm-pl0.sm-pr2
        .bg-white.rounded.p3.mb2
          %h2.my0 Add multiple employees
          %h4.mb0 Step 1. Get the CSV template
          %p.mt0.gray-60 Download the sample spreadsheet. The first 3 columns: first name, last name, email address are mandatory.
          = form_tag download_csv_template_organization_path(@organization), method: :get do
            = button_tag "Download template", class: 'btn btn-outline gray-60 px2'

          %h4.mb0 Step 2. Upload your updated CSV
          %p.mt0.gray-60 After you've added new employees to your CSV file, upload it to add the employees to your account.
          = form_tag email_members_upload_file_organization_path(@organization), multipart: true do
            = file_field_tag "file", accept: 'text/csv', class: 'p0'
            = button_tag "Upload CSV", class: 'rounded btn btn-primary px2 mt2'
          .container
            - flash.each do |key, value|
              %div{:class => "alert alert-#{key}"}= value

      .col.col-12.sm-col.sm-col-6.sm-pl0.sm-pr2
        .bg-white.rounded.p3.mb2
          %h2.my0 Add an employee
          = simple_form_for @user, url: add_individual_organization_path, html: {class: 'new_user clearfix'} do |f|
            .col.col-12.sm-col.sm-col-6.px2.sm-pl0.sm-pr2
              %label.h6.mb0.gray-60{for: 'first_name'} First name
              = text_field_tag :first_name, nil, class: 'text-input', data: {"parsley-required": "true"}
            .col.col-12.sm-col.sm-col-6.px2.sm-pl0.sm-pr2
              %label.h6.mb0.gray-60{for: 'last_name'} Last name
              = text_field_tag :last_name, nil, class: 'text-input', data: {"parsley-required": "true"}
            .col.col-12.px2.sm-pl0.sm-pr2
              = f.input :email, input_html: {class: 'text-input', data: {"parsley-required": "true"}}, label: 'Email', label_html: {class: "h6 mb0 gray-60"}

          .px2.sm-px0.mt2
            .flex.items-center.flex-wrap
              #btn-add-employee.btn.btn-sm.btn-primary Add employee
              #msg-add-member.flex.items-center.green{style:'display:none'}
                .h4.ml0.sm-ml2.mr1 Employee added
                = inline_svg "icons/i-success.svg", class: 'icon-s'

:javascript

  (function(){
    
    /*------------- BEGIN Module variable declarations and initializations-----------*/
    var $btnAddEmployee,
        $addMemberForm,
        $msgAddMember,
        $memberCount,
        $pAddMemberForm,
        $pEmail,
        $email;

    // JQueryfied elements
    $memberCount = $('#member-count');
    $addMemberForm = $('.new_user');
    $btnAddEmployee = $('#btn-add-employee');
    $msgAddMember = $('#msg-add-member');
    $email = $addMemberForm.find('input[type=email]');
    
    // Parsleyfied elements
    $pAddMemberForm = $addMemberForm.parsley({
                              errorClass: "error",
                              errorsWrapper: '<div class="invalid-message inline right"></div>',
                              errorTemplate: '<span></span>',
                              successClass: null
                          });
    
    // We need to parsleyfy the email field to throw error states for already taken emails
    $pEmail = $email.parsley();

    /*------------- END Module variable declarations and initializations-----------*/

    /*------------- BEGIN Module event handlers -----------------------------------*/
    $btnAddEmployee.on('click', function(e){
      // Reset email field if its in error state, so only one error state can exist at time
      if($email.hasClass('error')){
        $pEmail.reset();
      };
      $pAddMemberForm.validate();
    });
    
    $pAddMemberForm.on('form:success', function(){
      var formData = {};
      
      // Create form data payload for posting to server
      $addMemberForm.find("input[name]").each(function (index, node) {
        formData[node.name] = node.value;
      });

      $.ajax({
        type: "POST",
        url: $addMemberForm.attr('action'),
        data: formData,
        dataType: 'json',
        success: function(msg) {
          // On successful member addition, reset parsley form, 
          // Clear input fields, update member count, display feedback message
          $pAddMemberForm.reset();
          var mc = msg.member_count;
          $memberCount.html(mc);
          $addMemberForm.find('input[type=text], input[type=email]').val("");
          $msgAddMember.fadeIn();
          setTimeout(function(){ $msgAddMember.fadeOut(); }, 5000);
        },
        error: function() {
          // Server side error: email already taken for user
          $pEmail.addError('email_taken_error', {message: 'Email already taken' , assert: false, updateClass: true});
        }
      });
    });
    /*------------- END Module event handlers -------------------------------------*/
  }());